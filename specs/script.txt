

main()
{
	map.name = "";
}

function double(x)
{
	return x * 2;
}

entry dojunk()
{
	// array init example
	a = [3, 4, "five", 6.0, ["another", "array"], false];
	// set example
	s1 = {1,2,4,7};
	s2 = {2,3,4};
	
	a[0] = 4;						// push a, push 0, push 4, pop array
	a[4][1] = "example";			// push a, push 4, push array, push 1, push "example", pop array

	a[0] += 4;						// push a, push 0, push array, push 4, add, pop array
	
	s3 = union(s1, s2);				// {1,2,3,4,7}
	s3 = diff(s1, s2); 				// {1,7}
	s3 = diff(s2, s1); 				// {3}
	s3 = intersect(s1, s2); 		// {2,4}
	s3 = xor(s1, s2); 				// {1,3,7}
	insert(s1, 6); 					// s1 = {1,2,3,4,6,7}
	remove(s1, 6); 					// s1 = {1,2,3,4,7}
	
	list3 = concat(list1, list2); 	// [1,2,3,4,3,4,5,6]
	list3 = remove(list1, list2); 	// [1,2]
	list3 = remove(list2, list1); 	// [5,6]
	list3 = concat(list1, 1); 		// [1,2,3,4,1]
	list3 = concat(1, list1); 		// [1,1,2,3,4]
	list3 = remove(1, list1); 		// [2,3,4]
	i = head(list1); 				// 1
	i = tail(list1); 				// 4
	push(list1, 0); 				// list1 = [0,1,2,3,4]
	i = removehead(list1); 			// 0, list1 = [1,2,3,4]
	enqueue(list1, 5); 				// list1 = [1,2,3,4,5]
	i = removetail(list1); 			// 5, list1 = [1,2,3,4]
	
	i = contains(a, 3);				// true (sequential search)
	i = contains(s1, 3);			// false (hash/binary search)
	i = contains(list1, 3);			// true (sequential search)

	i = length("apple");			// 5 (convert to string -> string length)
	i = length(a);					// 6 (array length)
	i = length(s1);					// 4 (set cardinality)
	i = length(list1);				// 4 (list length)
	
	log(double(5));
}

